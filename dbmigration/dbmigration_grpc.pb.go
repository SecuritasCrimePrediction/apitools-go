// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dbmigration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MigrationServiceClient is the client API for MigrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MigrationServiceClient interface {
	// Migrate the database
	DatabaseMigrate(ctx context.Context, in *DatabaseMigrateRequest, opts ...grpc.CallOption) (*DatabaseMigrateResponse, error)
	// Get db status (currently only contains migration information)
	DatabaseStatus(ctx context.Context, in *DatabaseStatusRequest, opts ...grpc.CallOption) (*DatabaseStatusResponse, error)
	// Rollback database
	DatabaseRollback(ctx context.Context, in *DatabaseRollbackRequest, opts ...grpc.CallOption) (*DatabaseRollbackResponse, error)
	// Get migration status
	DatabaseForceVersion(ctx context.Context, in *DatabaseForceVersionRequest, opts ...grpc.CallOption) (*DatabaseForceVersionResponse, error)
}

type migrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMigrationServiceClient(cc grpc.ClientConnInterface) MigrationServiceClient {
	return &migrationServiceClient{cc}
}

func (c *migrationServiceClient) DatabaseMigrate(ctx context.Context, in *DatabaseMigrateRequest, opts ...grpc.CallOption) (*DatabaseMigrateResponse, error) {
	out := new(DatabaseMigrateResponse)
	err := c.cc.Invoke(ctx, "/sis.rp.dev.v1.MigrationService/DatabaseMigrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationServiceClient) DatabaseStatus(ctx context.Context, in *DatabaseStatusRequest, opts ...grpc.CallOption) (*DatabaseStatusResponse, error) {
	out := new(DatabaseStatusResponse)
	err := c.cc.Invoke(ctx, "/sis.rp.dev.v1.MigrationService/DatabaseStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationServiceClient) DatabaseRollback(ctx context.Context, in *DatabaseRollbackRequest, opts ...grpc.CallOption) (*DatabaseRollbackResponse, error) {
	out := new(DatabaseRollbackResponse)
	err := c.cc.Invoke(ctx, "/sis.rp.dev.v1.MigrationService/DatabaseRollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationServiceClient) DatabaseForceVersion(ctx context.Context, in *DatabaseForceVersionRequest, opts ...grpc.CallOption) (*DatabaseForceVersionResponse, error) {
	out := new(DatabaseForceVersionResponse)
	err := c.cc.Invoke(ctx, "/sis.rp.dev.v1.MigrationService/DatabaseForceVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MigrationServiceServer is the server API for MigrationService service.
// All implementations must embed UnimplementedMigrationServiceServer
// for forward compatibility
type MigrationServiceServer interface {
	// Migrate the database
	DatabaseMigrate(context.Context, *DatabaseMigrateRequest) (*DatabaseMigrateResponse, error)
	// Get db status (currently only contains migration information)
	DatabaseStatus(context.Context, *DatabaseStatusRequest) (*DatabaseStatusResponse, error)
	// Rollback database
	DatabaseRollback(context.Context, *DatabaseRollbackRequest) (*DatabaseRollbackResponse, error)
	// Get migration status
	DatabaseForceVersion(context.Context, *DatabaseForceVersionRequest) (*DatabaseForceVersionResponse, error)
	mustEmbedUnimplementedMigrationServiceServer()
}

// UnimplementedMigrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMigrationServiceServer struct {
}

func (UnimplementedMigrationServiceServer) DatabaseMigrate(context.Context, *DatabaseMigrateRequest) (*DatabaseMigrateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseMigrate not implemented")
}
func (UnimplementedMigrationServiceServer) DatabaseStatus(context.Context, *DatabaseStatusRequest) (*DatabaseStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseStatus not implemented")
}
func (UnimplementedMigrationServiceServer) DatabaseRollback(context.Context, *DatabaseRollbackRequest) (*DatabaseRollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseRollback not implemented")
}
func (UnimplementedMigrationServiceServer) DatabaseForceVersion(context.Context, *DatabaseForceVersionRequest) (*DatabaseForceVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseForceVersion not implemented")
}
func (UnimplementedMigrationServiceServer) mustEmbedUnimplementedMigrationServiceServer() {}

// UnsafeMigrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MigrationServiceServer will
// result in compilation errors.
type UnsafeMigrationServiceServer interface {
	mustEmbedUnimplementedMigrationServiceServer()
}

func RegisterMigrationServiceServer(s *grpc.Server, srv MigrationServiceServer) {
	s.RegisterService(&_MigrationService_serviceDesc, srv)
}

func _MigrationService_DatabaseMigrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseMigrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).DatabaseMigrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sis.rp.dev.v1.MigrationService/DatabaseMigrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).DatabaseMigrate(ctx, req.(*DatabaseMigrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationService_DatabaseStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).DatabaseStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sis.rp.dev.v1.MigrationService/DatabaseStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).DatabaseStatus(ctx, req.(*DatabaseStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationService_DatabaseRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseRollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).DatabaseRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sis.rp.dev.v1.MigrationService/DatabaseRollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).DatabaseRollback(ctx, req.(*DatabaseRollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationService_DatabaseForceVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseForceVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).DatabaseForceVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sis.rp.dev.v1.MigrationService/DatabaseForceVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).DatabaseForceVersion(ctx, req.(*DatabaseForceVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MigrationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sis.rp.dev.v1.MigrationService",
	HandlerType: (*MigrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DatabaseMigrate",
			Handler:    _MigrationService_DatabaseMigrate_Handler,
		},
		{
			MethodName: "DatabaseStatus",
			Handler:    _MigrationService_DatabaseStatus_Handler,
		},
		{
			MethodName: "DatabaseRollback",
			Handler:    _MigrationService_DatabaseRollback_Handler,
		},
		{
			MethodName: "DatabaseForceVersion",
			Handler:    _MigrationService_DatabaseForceVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dbmigration/dbmigration.proto",
}
